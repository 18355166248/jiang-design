.button-color(@color; @background; @border) {
  color: @color;
  border-color: @border; // a inside Button which only work in Chrome
  & when not(@background = null) {
    background: @background;
  }
}

.button-disabled(@color: @btn-disable-color; @background: @btn-disable-bg; @border: @btn-disable-border) {
  &[disabled] {
    &,
    &:hover,
    &:focus,
    &:active {
      .button-color(@color; @background; @border);

      text-shadow: none;
      box-shadow: none;
    }
  }
}

.button-size(@height; @padding-horizontal; @font-size; @border-radius) {
  @padding-vertical: max(
    (round(((@height - @font-size * @line-height-base) / 2) * 10) / 10) - @border-width-base,
    0
  );
  height: @height;
  padding: @padding-vertical @padding-horizontal;
  font-size: @font-size;
  border-radius: @border-radius;
}

.button-variant-primary(@color; @background; @backgroundHover: yellow; @backgroundActive: yellow) {
  .button-color(@color; @background; @background);

  text-shadow: @btn-text-shadow;
  box-shadow: @btn-primary-shadow;

  &:hover,
  &:focus {
    & when (@theme = dark) {
      .button-color(
        @color; ~`colorPalette('@{background}', 7) `; ~`colorPalette('@{background}', 7) `
      );
    }
    & when (not (@theme = dark) and not (@theme = variable)) {
      .button-color(
        @color; ~`colorPalette('@{background}', 5) `; ~`colorPalette('@{background}', 5) `
      );
    }
    & when (@theme = variable) {
      .button-color(@color; @backgroundHover; @backgroundHover);
    }
  }

  &:active {
    & when (@theme = dark) {
      .button-color(
        @color; ~`colorPalette('@{background}', 5) `; ~`colorPalette('@{background}', 5) `
      );
    }
    & when (not (@theme = dark) and not (@theme = variable)) {
      .button-color(
        @color; ~`colorPalette('@{background}', 7) `; ~`colorPalette('@{background}', 7) `
      );
    }
    & when (@theme = variable) {
      .button-color(@color; @backgroundActive; @backgroundActive);
    }
  }

  .button-disabled();
}

.btn {
  position: relative;
  display: inline-block;
  font-weight: @btn-font-weight;
  white-space: nowrap;
  text-align: center;
  background-image: none;
  border: @btn-border-width @btn-border-style transparent;
  box-shadow: @btn-shadow;
  cursor: pointer;
  transition: all 0.3s @ease-in-out;
  user-select: none;
  touch-action: manipulation;
  .button-size(
    @btn-height-base; @btn-padding-horizontal-base; @font-size-base; @btn-border-radius-base
  );
}

.btn-default() {
  .button-variant-default(@btn-default-color; @btn-default-bg; @btn-default-border; );

  &:hover,
  &:focus,
  &:active {
    text-decoration: none;
    background: @btn-default-bg;
  }
}

.btn-primary() {
  .button-variant-primary(@btn-primary-color; @btn-primary-bg; @primary-color-hover; @primary-color-active);
}

.button-variant-default(@color; @background; @border) {
  .button-color(@color; @background; @border);

  &:hover,
  &:focus {
    .button-color(
      ~`colorPalette('@{btn-primary-bg}', 5) `; @background;
        ~`colorPalette('@{btn-primary-bg}', 5) `
    );
  }

  &:active {
    & when (not (@theme = dark) and not (@theme = variable)) {
      .button-color(
        ~`colorPalette('@{btn-primary-bg}', 7) `; @background;
          ~`colorPalette('@{btn-primary-bg}', 7) `
      );
    }
  }
  .button-disabled();
}
